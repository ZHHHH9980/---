/*
 * @Author: How Zhong
 * @Date: 2020-11-06 23:07:55
 * @LastEditors: your name
 * @LastEditTime: 2021-01-31 16:00:32
 * @Description: file content
 */
{
  "workbench.colorTheme": "Tiny Light",

  "editor.fontSize": 21,
  "editor.lineNumbers": "relative",
  "editor.formatOnSave": true,
  "editor.hover.delay": 0,
  "editor.suggest.snippetsPreventQuickSuggestions": false,

  // prettier
  "editor.defaultFormatter": "esbenp.prettier-vscode",
  "[javascript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },

  // vim
  // 命令等待时间
  "vim.timeout": 500,
  // 使用系统剪切板,实质是将默认寄存器的内容拷贝到剪切版中
  "vim.useSystemClipboard": true,
  "vim.easymotion": true,
  "vim.sneak": true,
  // "agr 指定使用某个寄存器replace | [motion] example:aw i"
  "vim.replaceWithRegister": true,
  "vim.surround": true,
  "vim.enableNeovim": true,
  "vim.neovimPath": "C:\\Users\\how浩\\nvim-win64\\Neovim\\bin\\nvim.exe",
  // 前一个是转义字符
  "vim.leader": "\\",
  "vim.insertModeKeyBindings": [
    {
      "before": ["j", "k"],
      "after": ["<Esc>"]
    }
  ],
  // 非递归指的是remap全部恢复出厂设置
  "vim.insertModeKeyBindingsNonRecursive": [
    // cc -> console.log()
    /* 暂停使用 
     {
      "before": ["c", "s"],
      "after": ["c", "o", "n", "s", "o", "l", "e", ".", "l", "o", "g", "(", ")"]
    }, */
    // cn -> const
    {
      "before": ["c", "n"],
      "after": ["c", "o", "n", "s", "t"]
    },
    {
      "before": ["r", "n"],
      "after": ["r", "e", "t", "u", "r", "n"]
    },
    // exco -> export const
    {
      "before": ["e", "x", "c", "o"],
      "after": ["e", "x", "p", "o", "r", "t", " ", "c", "o", "n", "s", "t"]
    },
    // exde -> export default
    {
      "before": ["e", "x", "d", "e"],
      "after": [
        "e",
        "x",
        "p",
        "o",
        "r",
        "t",
        " ",
        "d",
        "e",
        "f",
        "a",
        "u",
        "l",
        "t"
      ]
    },

    // xx.log ->  console.log(xx);
    {
      "before": [".", "l", "o", "g"],
      "after": [
        "<Esc>",
        "v",
        "^",
        "\"",
        "a",
        "d",
        "a",
        "c",
        "o",
        "n",
        "s",
        "o",
        "l",
        "e",
        ".",
        "l",
        "o",
        "g",
        "(",
        "'",
        "<Esc>",
        "\"",
        "a",
        "p",
        "l",
        "a",
        ",",
        "<Esc>",
        "\"",
        "a",
        "p"
      ]
    },

    // xxx.ip -> import xxx from "cursor here"
    {
      "before": [".", "i", "p"],
      "after": [
        "<Esc>",
        "v",
        "^",
        "\"",
        "a",
        "d",
        // insert import
        "a",
        "i",
        "m",
        "p",
        "o",
        "r",
        "t",
        " ",
        // paste xx
        "<Esc>",
        "\"",
        "a",
        "p",
        // insert from ""
        "a",
        " ",
        "f",
        "r",
        "o",
        "m",
        " ",
        "\"",
        "\"",
        "<Esc>",
        "i"
      ]
    },
    // ipC  -> import React,{ Component } from "React";
    {
      "before": ["i", "p", "C"],
      "after": [
        "i",
        "m",
        "p",
        "o",
        "r",
        "t",
        " ",
        "R",
        "e",
        "a",
        "c",
        "t",
        ",",
        "{",
        "C",
        "o",
        "m",
        "p",
        "o",
        "n",
        "e",
        "n",
        "t",
        "}",
        " ",
        "f",
        "r",
        "o",
        "m",
        " ",
        "\"",
        "r",
        "e",
        "a",
        "c",
        "t",
        "\"",
        ";"
      ]
    },
    // ipR  -> import React from "React";
    {
      "before": ["i", "p", "R"],
      "after": [
        "i",
        "m",
        "p",
        "o",
        "r",
        "t",
        " ",
        "R",
        "e",
        "a",
        "c",
        "t",
        " ",
        "f",
        "r",
        "o",
        "m",
        " ",
        "\"",
        "r",
        "e",
        "a",
        "c",
        "t",
        "\"",
        ";"
      ]
    },
    // 大杀器
    // .iC -> 初始化一个React Class组件
    /*         
        import React,{Component} from React;
        class Header extends Component {
            render(){
                return( cursor here )
            }
        }

        export default Header;
        */
    {
      "before": [".", "i", "C"],
      "after": [
        // import React,{Component} from "react";
        "<Esc>",
        "O",
        "i",
        "m",
        "p",
        "o",
        "r",
        "t",
        " ",
        "R",
        "e",
        "a",
        "c",
        "t",
        ",",
        "{",
        "C",
        "o",
        "m",
        "p",
        "o",
        "n",
        "e",
        "n",
        "t",
        "}",
        " ",
        "f",
        "r",
        "o",
        "m",
        " ",
        "\"",
        "r",
        "e",
        "a",
        "c",
        "t",
        "\"",
        ";",
        "<Enter>",
        // take Class Name
        "<Esc>",
        "j",
        "v",
        "$",
        "\"",
        "a",
        "d",
        // enter insert Mode
        "a",
        // input class
        "c",
        "l",
        "a",
        "s",
        "s",
        " ",
        // paste Class Name
        "<Esc>",
        "\"",
        "a",
        "p",
        // output
        /*         
        class Header extends Component {
            render(){
                return( cursor here )
            }
        }

        export default Header;
        */
        "a",
        " ",
        "e",
        "x",
        "t",
        "e",
        "n",
        "d",
        "s",
        " ",
        "C",
        "o",
        "m",
        "p",
        "o",
        "n",
        "e",
        "n",
        "t",
        " ",
        "{",
        "<Enter>",
        "r",
        "e",
        "n",
        "d",
        "e",
        "r",
        "(",
        ")",
        "{",
        "<Enter>",
        "r",
        "e",
        "t",
        "u",
        "r",
        "n",
        "(",
        // input
        // export default Header;
        "<Esc>",
        "G",
        "o",
        "<Enter>",
        "e",
        "x",
        "p",
        "o",
        "r",
        "t",
        " ",
        "d",
        "e",
        "f",
        "a",
        "u",
        "l",
        "t",
        " ",
        "<Esc>",
        "\"",
        "a",
        "p",
        "a",
        ";",
        // bact to the render()
        "<Esc>",
        "4",
        "k",
        "i"
      ]
    },
    // /nst -> need a single tag
    // it really usefull when typing React
    // example: <Tag>(input: /nst)</Tag> -> <Tag/>
    {
      "before": ["/", "n", "s", "t"],
      "after": [
        "<Esc>",
        "v",
        "T",
        "<",
        "h",
        "d",
        "l",
        "d",
        "w",
        "f",
        ">",
        "i",
        " ",
        "/"
      ]
    }
  ],
  "vim.visualModeKeyBindings": [
    // 以下操作是在视图模式下在选中的两端快速添加,(),[],{},'',"",<>,``
    // 意为 add + ()
    {
      "before": ["a", "("],
      "after": ["c", "(", "<Esc>", "j", "\"", "a", "p"]
    },
    {
      "before": ["a", "{"],
      "after": ["c", "{", "<Esc>", "j", "\"", "a", "p"]
    },
    {
      "before": ["a", "["],
      "after": ["c", "[", "<Esc>", "j", "\"", "a", "p"]
    },
    {
      "before": ["a", "'"],
      "after": ["c", "'", "'", "<Esc>", "j", "\"", "a", "p"]
    },
    {
      "before": ["a", "\""],
      "after": ["c", "\"", "\"", "<Esc>", "j", "\"", "a", "p"]
    },
    {
      "before": ["a", "<"],
      "after": ["c", "<", ">", "<Esc>", "j", "\"", "a", "p"]
    },
    {
      "before": ["a", "`"],
      "after": ["c", "`", "`", "<Esc>", "j", "\"", "a", "p"]
    }
  ],

  "vim.visualModeKeyBindingsNonRecursive": [
    // R 替代 r
    {
      "before": ["R"],
      "after": ["r"]
    },
    // default go replace
    // 默认复制
    {
      "before": ["r"],
      "after": ["\"", "a", "g", "r"]
    },
    // go replace
    {
      "before": ["a", "r"],
      "after": ["\"", "a", "g", "r"]
    },

    // yank 复制
    {
      "before": ["y"],
      "after": ["\"", "a", "y"]
    },
    // delete
    {
      "before": ["d"],
      "after": ["\"", "_", "d"]
    },
    {
      "before": ["n", "d"],
      "after": ["\"", "a", "d"]
    },
    {
      "before": ["d", "d"],
      "after": ["\"", "_", "d", "d"]
    },
    {
      "before": ["n", "d", "d"],
      "after": ["\"", "a", "d", "d"]
    },
    /* TODO: in visual mode, putting the "y", which can make the cursor
     stop in the end instead of the start 
     大杀器！
     实现的大概思路是:
     V -> line Visual mode 先使用macro（宏） record 光标移动位置
     之后按y 
     1.stop the recording
     2. yank
     3. @a repeat 
     */
    // when you put "y" it won't yank immediately, it should stop the record first
    /* {
      "before": ["y"],
      "after": ["q", "y", "@", "z"]
    }, */
    // 后面需要消除V 带来的副作用 也就是清除record

    // 跟norm模式下统一方向
    {
      "before": ["k"],
      "after": ["j"]
    },
    {
      "before": ["i"],
      "after": ["k"]
    },

    {
      "before": ["j"],
      "after": ["h"]
    },
    // v至行首 行尾
    {
      "before": ["L"],
      "after": ["$"]
    },
    {
      "before": ["J"],
      "after": ["^"]
    },
    //将o映射成i 这就能j正常使用 v o(i)
    {
      "before": ["o"],
      "after": ["i"]
    },

    // 删除的内容放入a寄存器中
    { "before": ["c"], "after": ["q", "\"", "a", "c"] },
    { "before": ["C"], "after": ["\"", "a", "C"] },
    {
      "before": ["d"],
      "after": ["\"", "_", "d"]
    },
    // 修改逻辑：
    // 1. dd c删除的内容放入a寄存器中, 也就是一般不需要使用的脏值放入a寄存器
    // 2. 输入n dd 表示 need content delete 需要delete的content
    { "before": ["c"], "after": ["\"", "a", "c"] },
    { "before": ["C"], "after": ["\"", "a", "C"] },
    { "before": ["n", "c"], "after": ["c"] },
    { "before": ["n", "C"], "after": ["C"] },
    {
      "before": ["d"],
      "after": ["\"", "_", "d"]
    },
    {
      "before": ["n", "d"],
      "after": ["\"", "a", "d"]
    },
    {
      "before": ["d", "d"],
      "after": ["\"", "_", "d", "d"]
    },
    // 放入a寄存器管理
    {
      "before": ["n", "d", "d"],
      "after": ["\"", "a", "d", "d"]
    }
  ],

  "vim.commandLineModeKeyBindingsNonRecursive": [
    // 在命令行统一插入符号
    {
      "before": ["J"],
      "after": ["I"]
    },
    {
      "before": ["L"],
      "after": ["A"]
    }
  ],
  // 快捷设置相对行号和绝对行号
  "vim.normalModeKeyBindings": [
    {
      "before": ["<leader>", "r", "n"],
      "commands": [":set relativenumber"]
    },
    {
      "before": ["<leader>", "n"],
      "commands": [":set number"]
    }
  ],
  "vim.normalModeKeyBindingsNonRecursive": [
    // R 替代 r
    {
      "before": ["R"],
      "after": ["r"]
    },
    // default go replace
    // 复制粘贴将放入a寄存器统一管理
    // example: yiw -> riw replace the word directly
    {
      "before": ["r"],
      "after": ["\"", "a", "g", "r"]
    },
    // go replace
    {
      "before": ["a", "r"],
      "after": ["\"", "a", "g", "r"]
    },
    {
      "before": ["b", "r"],
      "after": ["\"", "b", "g", "r"]
    },
    /* TODO: in visual mode, putting the "y", which can make the cursor
     stop in the end instead of the start 
     */
    {
      "before": ["<Space>"],
      "after": ["a"]
    },
    {
      "before": ["h"],
      "after": ["i"]
    },
    // ctrl+w 切换分屏 j -> h
    {
      "before": ["<C-w>", "j"],
      "after": ["<C-w>", "h"]
    },
    // 切换标签页
    {
      "before": ["E"],
      "after": ["g", "T"]
    },
    {
      "before": ["R"],
      "after": ["g", "t"]
    },
    // yank
    {
      "before": ["y"],
      "after": ["\"", "a", "y"]
    },
    // 修改逻辑：
    // 1. dd c删除的内容放入a寄存器中, 也就是一般不需要使用的脏值放入a寄存器
    // 2. 输入n dd 表示 need content delete 需要delete的content, 这样输入的话会剪切
    { "before": ["c"], "after": ["\"", "_", "c"] },
    { "before": ["C"], "after": ["\"", "_", "C"] },
    { "before": ["n", "c"], "after": ["\"", "a", "c"] },
    { "before": ["n", "C"], "after": ["\"", "a", "C"] },
    {
      "before": ["d"],
      "after": ["\"", "_", "d"]
    },
    {
      "before": ["n", "d"],
      "after": ["\"", "a", "d"]
    },
    {
      "before": ["d", "d"],
      "after": ["\"", "_", "d", "d"]
    },
    {
      "before": ["n", "d", "d"],
      "after": ["\"", "a", "d", "d"]
    },
    // paste default register:a
    // 统一默认寄存器:a
    {
      "before": ["p"],
      "after": ["\"", "a", "p"]
    },
    {
      // 当行尾部快速添加分号
      // 但是这里会留在末尾，看看能不能改进一下
      // 改进完成 使用mark操作
      "before": ["a", ";"],
      // mark this postion into "a"
      // use `a go back
      "after": ["m", "a", "$", "a", ";", "<Esc>", "`", "a"]
    },
    // add , at the end of the sentence
    {
      "before": ["a", ","],
      "after": ["$", "a", ","]
    },

    // add "" surrounding a word
    {
      "before": ["a", "\""],
      "after": [
        "\"",
        "a",
        "d",
        "i",
        "w",
        "i",
        "\"",
        "\"",
        "<Esc>",
        "h",
        "\"",
        "a",
        "p"
      ]
    },
    // add '' surrounding a word
    {
      "before": ["a", "'"],
      "after": ["\"", "a", "d", "i", "w", "i", "'", "<Esc>", "\"", "a", "p"]
    },
    // add ()  a word
    {
      "before": ["a", "("],
      "after": [
        "\"",
        "a",
        "d",
        "i",
        "w",
        "i",
        "(",
        ")",
        "<Esc>",
        "h",
        "\"",
        "a",
        "p"
      ]
    },
    {
      "before": ["a", ")"],
      "after": [
        "\"",
        "a",
        "d",
        "i",
        "w",
        "i",
        "(",
        ")",
        "<Esc>",
        "h",
        "\"",
        "a",
        "p"
      ]
    },
    // add <>  a word
    {
      "before": ["a", "<"],
      "after": [
        "\"",
        "a",
        "d",
        "i",
        "w",
        "i",
        "<",
        ">",
        "<Esc>",
        "h",
        "\"",
        "a",
        "p"
      ]
    },
    {
      "before": ["a", ">"],
      "after": [
        "\"",
        "a",
        "d",
        "i",
        "w",
        "i",
        "<",
        ">",
        "<Esc>",
        "h",
        "\"",
        "a",
        "p"
      ]
    },
    // add {} surround a word
    {
      "before": ["a", "{"],
      "after": [
        "\"",
        "a",
        "d",
        "i",
        "w",
        "i",
        "{",
        "}",
        "<Esc>",
        "h",
        "\"",
        "a",
        "p"
      ]
    },
    // add {} surround a word
    {
      "before": ["a", "}"],
      "after": [
        "\"",
        "a",
        "d",
        "i",
        "w",
        "i",
        "{",
        "}",
        "<Esc>",
        "h",
        "\"",
        "a",
        "p"
      ]
    },
    // 使用空格<space>代替a enter insert mode
    // adjust ↑↓←→
    {
      "before": ["k"],
      "after": ["j"]
    },
    {
      "before": ["i"],
      "after": ["k"]
    },

    {
      "before": ["j"],
      "after": ["h"]
    },
    // 修改行首行尾插入
    {
      "before": ["J"],
      "after": ["I"]
    },
    {
      "before": ["L"],
      "after": ["A"]
    },
    // sneak
    {
      "before": ["<leader>", "s"],
      "after": ["<leader>", "<leader>", "s"]
    },
    // 删除至行首 行尾
    {
      "before": ["d", "L"],
      "after": ["d", "$"]
    },
    {
      "before": ["d", "J"],
      "after": ["d", "^"]
    },
    /* 
    这部分复制粘贴的选择思路:
    ayy -> ap
    byy -> bp
    这样可以迅速复制多个内容，比如单词 并且一一对应 非常舒服
    仅支持a-e这么多个regsiter
    够用
    */
    // yank 复制
    // ay -> "ay
    // 直接放入 register a
    {
      "before": ["a", "y"],
      "after": ["\"", "a", "y"]
    },
    // by -> "by
    // 以下同理
    {
      "before": ["b", "y"],
      "after": ["\"", "b", "y"]
    },
    {
      "before": ["c", "y"],
      "after": ["\"", "c", "y"]
    },
    {
      "before": ["d", "y"],
      "after": ["\"", "d", "y"]
    },
    {
      "before": ["e", "y"],
      "after": ["\"", "e", "y"]
    },
    // paste 快捷粘贴
    {
      "before": ["a", "p"],
      "after": ["\"", "a", "p"]
    },
    // by -> "by
    // 以下同理
    {
      "before": ["b", "p"],
      "after": ["\"", "b", "p"]
    },
    {
      "before": ["c", "p"],
      "after": ["\"", "c", "p"]
    },
    {
      "before": ["d", "p"],
      "after": ["\"", "d", "p"]
    },

    {
      "before": ["e", "p"],
      "after": ["\"", "e", "p"]
    }
  ],

  "vim.handleKeys": {
    // crlt + a 可用于visual block 递增
    // "<C-a>": false,
    "<C-f>": false,
    "<C-n>": false,
    // "<C-c>": false,
    "<C-x>": false,
    "<C-y>": false
  },

  "search.exclude": {
    "**/node_modules": true,
    "**/bower_components": true,
    "build/": true,
    "temp/": true,
    "library/": true,
    "**/*.anim": true
  },
  "files.exclude": {
    "**/.git": true,
    "**/.DS_Store": true,
    "**/*.meta": true,
    "library/": true,
    "local/": true,
    "temp/": true
  },
  "terminal.integrated.shell.windows": "C:\\Windows\\System32\\cmd.exe",
  "workbench.statusBar.visible": true,
  "diffEditor.ignoreTrimWhitespace": false,
  // 括号插件
  "bracket-pair-colorizer-2.colors": ["Brown", "skyBlue", "Crimson"],
  "workbench.iconTheme": "file-icons",
  "javascript.updateImportsOnFileMove.enabled": "always",
  "local-history.daysLimit": 3,
  "todo-tree.tree.showScanModeButton": false,
  "git.ignoreWindowsGit27Warning": true,
  "[markdown]": {
    "editor.wordWrap": "on",
    "editor.quickSuggestions": false
  },
  "markdown.preview.fontSize": 16,
  "vscode-neovim.highlightGroups.ignoreHighlights": [
    "SpecialKey",
    "EndOfBuffer",
    "TermCursor",
    "TermCursorNC",
    "NonText",
    "ErrorMsg",
    "MoreMsg",
    "ModeMsg",
    "LineNr",
    "CursorLineNr",
    "Question",
    "StatusLine",
    "StatusLineNC",
    "VertSplit",
    "Title",
    "VisualNC",
    "WarningMsg",
    "WildMenu",
    "^Diff",
    "Sign",
    "SignColumn",
    "^Spell",
    "^Pmenu",
    "^Tab",
    "^Cursor",
    "ColorColumn",
    "QuickFixLine",
    "Whitespace",
    "NormalNC",
    "Normal",
    "NormalFloat",
    "MsgSeparator",
    "MsgArea",
    "^RedrawDebug",
    "Cursor",
    "lCursor",
    "MatchParen",
    "^Nvim",
    "Operator",
    "Delimiter",
    "Identifier",
    "SpecialChar",
    "Number",
    "Type",
    "String",
    "Error",
    "Comment",
    "Constant",
    "Special",
    "Statement",
    "PreProc",
    "Underlined",
    "Ignore",
    "Todo",
    "Character",
    "Boolean",
    "Float",
    "Function",
    "Conditional",
    "Repeat",
    "Label",
    "Keyword",
    "Exception",
    "Include",
    "Define",
    "Macro",
    "PreCondit",
    "StorageClass",
    "Structure",
    "Typedef",
    "Tag",
    "SpecialComment",
    "Debug",
    "Folded",
    "FoldColumn"
  ],
  "vscode-neovim.neovimExecutablePaths.linux": "/usr/bin/nvim",
  "vscode-neovim.neovimInitVimPaths.linux": "/usr/bin/nvim",
  "vscode-neovim.neovimInitVimPaths.win32": "/usr/bin/nvim",
  "vscode-neovim.useWSL": true,
  "window.zoomLevel": -1
}
